import { IInterviewRepository } from "@core/interfaces/repository/IInterviewRepository";
import IQuestionRepository from "@core/interfaces/repository/IQuestionRepository";
import IAptitudeService from "@core/interfaces/services/IAptitudeService";
import { IRoundStatus, RoundStatus, RoundType } from "model/Interview";
import { IAptitudeQuestion, IQuestions } from "model/Question";
import GeminiHelper from "utils/gemini.helper";

class AptitudeService implements IAptitudeService {
  constructor(
    private questionsRepo: IQuestionRepository,
    private interviewRepository: IInterviewRepository
  ) {}

  async createAptitudeTest(jobId: string) {
    const questions = await GeminiHelper.generateAptitudeQuestions();

    if (!questions || questions.length === 0) {
      throw new Error("No questions generated by AI.");
    }

    const formattedQuestions: IAptitudeQuestion[] = questions.map((q: any) => ({
      q_id: q.id,
      question: q.question,
      options: q.options,
      correctAnswer: q.correctAnswer,
    }));

    console.log(formattedQuestions);

    return await this.questionsRepo.createAptitudeTest(
      jobId,
      formattedQuestions
    );
  }

  async fetchQuestions(jobId: string): Promise<IQuestions | null> {
    return await this.questionsRepo.getQuestions(jobId);
  }

  async scheduleAptitude(interviewId: string): Promise<void> {
    const now = new Date();

    const state: IRoundStatus = {
      roundType: RoundType["Aptitude Test"],
      status: RoundStatus.Failed,
      scheduledAt: now,
      createdAt: now,
      updatedAt: now,
    };
    await this.interviewRepository.updateAptitudeTestById(interviewId, state);
    return;
  }

  // async getAptitudeResult(interviewId: string): Promise<IAptitudeTestResult> {
  //   // const responses = await this.responseRepo.getResponsesByInterviewId(
  //   //   interviewId
  //   // );
  //   // if (!responses.length) {
  //   //   throw new Error("No responses found for this interview.");
  //   // }

  //   // const correctCount = responses.filter((r) => r.isCorrect).length;
  //   // const incorrectCount = responses.length - correctCount;
  //   // const totalQuestions = await this.interviewRepo.getTotalAptitudeQuestions(
  //   //   interviewId
  //   // );
  //   // const unansweredCount = totalQuestions - responses.length;
  //   // const scorePercentage = (correctCount / totalQuestions) * 100;

  //   // const interviewRound = await this.roundRepo.getInterviewRound(
  //   //   interviewId,
  //   //   RoundType.aptitude
  //   // );

  //   // if (!interviewRound) {
  //   //   throw new Error("Aptitude test round not found.");
  //   // }

  //   // return {
  //   //   interviewId,
  //   //   totalQuestions,
  //   //   correctCount,
  //   //   incorrectCount,
  //   //   unansweredCount,
  //   //   scorePercentage: parseFloat(scorePercentage.toFixed(2)),
  //   //   roundStatus: interviewRound.status,
  //   // };
  // }
}

export default AptitudeService;
