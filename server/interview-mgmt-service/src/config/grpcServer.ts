import * as grpc from "@grpc/grpc-js";
import * as protoLoader from "@grpc/proto-loader";
import path from "path";
import dotenv from "dotenv";
import AptitudeController from "@controllers/aptitude.controller";
import QuestionRepository from "@repositories/questions.repository";
import AptitudeService from "@services/aptitude.service";
import InterviewRepository from "@repositories/interview.repository";
import AptitudeTestResultRepository from "@repositories/aptitudeTestResult.repository";

dotenv.config();

const PROTO_PATH = path.resolve(__dirname, "../proto/interview.proto");
const packageDefinition = protoLoader.loadSync(PROTO_PATH);
const interviewProto = grpc.loadPackageDefinition(packageDefinition).interview;

const questionRepo = new QuestionRepository();
const interviewRepo = new InterviewRepository();
const aptitudeResultRepo = new AptitudeTestResultRepository();

const aptitudeServer = new AptitudeService(
  questionRepo,
  interviewRepo,
  aptitudeResultRepo
);
const aptitudeController = new AptitudeController(aptitudeServer);

// const interviewService = {
// CreateAptitudeTest: async (call: any, callback: any) => {
//   try {
//     const { jobId, companyId } = call.request;
//     const result = await createAptitudeTest(jobId);
//     callback(null, result);
//   } catch (error) {
//     callback(error, null);
//   }
// },
// CreateMachineTask: async (call: any, callback: any) => {
//   try {
//     const { jobId, companyId } = call.request;
//     const result = await createMachineTest(jobId,companyId);
//     callback(null, result);
//   } catch (error) {
//     callback(error, null);
//   }
// },
// };

const server = new grpc.Server();

//@ts-ignore
server.addService(interviewProto.InterviewService.service, {
  CreateAptitudeTest: aptitudeController.CreateAptitudeTest,
});

export default server;

// async function createAptitudeTest(jobId: string) {
//   try {
//     console.log(`Generating aptitude test for job ${jobId}...`);

//     const questions = await GeminiHelper.generateAptitudeQuestions();

//     if (!questions || questions.length === 0) {
//       throw new Error("No questions generated by AI.");
//     }

//     const aptitudeTestTemplate = await prisma.aptitudeTestTemplate.create({
//       data: {
//         jobId,
//         name: `Aptitude Test for ${jobId}`,
//       },
//     });

//     const formattedQuestions = questions.map((q: any) => ({
//       templateId: aptitudeTestTemplate.id,
//       category: q.category,
//       difficulty: q.difficulty,
//       questionText: q.question,
//       options: q.options,
//       correctAnswer: q.correctAnswer,
//     }));

//     await prisma.aptitudeTestQuestion.createMany({
//       data: formattedQuestions,
//     });

//     return { success: true, testId: aptitudeTestTemplate.id };
//   } catch (error) {
//     console.error("Error creating aptitude test:", error);
//     throw error;
//   }
// }

// async function createMachineTest(jobId: string, companyId:string) {
//   try {
//     console.log(`Generating machine task for job ${jobId}...`);

//     const task = await GeminiHelper.generateMachineTask();

//     const savedTask = await prisma.machineTask.create({
//       data: {
//         jobId,
//         companyId,
//         title: task.title,
//         description: task.description,
//         hoursToComplete: task.hoursToComplete,
//         requirements: {
//           create: task.requirements.map((requirement: string) => ({
//             requirement,
//           })),
//         },
//         evaluationCriteria: {
//           create: task.evaluationCriteria.map((criteria: string) => ({
//             criteria,
//           })),
//         },
//       },
//       include: {
//         requirements: true,
//         evaluationCriteria: true,
//       },
//     })

//     return savedTask;
//   } catch (error) {
//     console.error("Error saving machine task:", error);
//     throw new Error("Failed to save machine task.");
//   }
// }
