"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc = __importStar(require("@grpc/grpc-js"));
const protoLoader = __importStar(require("@grpc/proto-loader"));
const path_1 = __importDefault(require("path"));
const dotenv_1 = __importDefault(require("dotenv"));
const aptitude_controller_1 = __importDefault(require("../controllers/aptitude.controller"));
const questions_repository_1 = __importDefault(require("../repositories/questions.repository"));
const aptitude_service_1 = __importDefault(require("../services/aptitude.service"));
const interview_repository_1 = __importDefault(require("../repositories/interview.repository"));
const aptitudeTestResult_repository_1 = __importDefault(require("../repositories/aptitudeTestResult.repository"));
const machineTask_controller_1 = __importDefault(require("../controllers/machineTask.controller"));
const machineTask_service_1 = __importDefault(require("../services/machineTask.service"));
const machineTask_repository_1 = __importDefault(require("../repositories/machineTask.repository"));
dotenv_1.default.config();
const PROTO_PATH = path_1.default.resolve(__dirname, "../proto/interview.proto");
const packageDefinition = protoLoader.loadSync(PROTO_PATH);
const interviewProto = grpc.loadPackageDefinition(packageDefinition).interview;
const questionRepo = new questions_repository_1.default();
const interviewRepo = new interview_repository_1.default();
const aptitudeResultRepo = new aptitudeTestResult_repository_1.default();
const machineTaskRepo = new machineTask_repository_1.default();
const aptitudeServer = new aptitude_service_1.default(questionRepo, interviewRepo, aptitudeResultRepo);
const machineTaskServer = new machineTask_service_1.default(machineTaskRepo, interviewRepo);
const aptitudeController = new aptitude_controller_1.default(aptitudeServer);
const machineTaskController = new machineTask_controller_1.default(machineTaskServer);
// CreateMachineTask: async (call: any, callback: any) => {
//   try {
//     const { jobId, companyId } = call.request;
//     const result = await createMachineTest(jobId,companyId);
//     callback(null, result);
//   } catch (error) {
//     callback(error, null);
//   }
// },
const server = new grpc.Server();
//@ts-ignore
server.addService(interviewProto.InterviewService.service, {
    CreateAptitudeTest: aptitudeController.CreateAptitudeTest,
    CreateMachineTask: machineTaskController.CreateMachineTask,
});
exports.default = server;
// async function createAptitudeTest(jobId: string) {
//   try {
//     console.log(`Generating aptitude test for job ${jobId}...`);
//     const questions = await GeminiHelper.generateAptitudeQuestions();
//     if (!questions || questions.length === 0) {
//       throw new Error("No questions generated by AI.");
//     }
//     const aptitudeTestTemplate = await prisma.aptitudeTestTemplate.create({
//       data: {
//         jobId,
//         name: `Aptitude Test for ${jobId}`,
//       },
//     });
//     const formattedQuestions = questions.map((q: any) => ({
//       templateId: aptitudeTestTemplate.id,
//       category: q.category,
//       difficulty: q.difficulty,
//       questionText: q.question,
//       options: q.options,
//       correctAnswer: q.correctAnswer,
//     }));
//     await prisma.aptitudeTestQuestion.createMany({
//       data: formattedQuestions,
//     });
//     return { success: true, testId: aptitudeTestTemplate.id };
//   } catch (error) {
//     console.error("Error creating aptitude test:", error);
//     throw error;
//   }
// }
// async function createMachineTest(jobId: string, companyId:string) {
//   try {
//     console.log(`Generating machine task for job ${jobId}...`);
//     const task = await GeminiHelper.generateMachineTask();
//     const savedTask = await prisma.machineTask.create({
//       data: {
//         jobId,
//         companyId,
//         title: task.title,
//         description: task.description,
//         hoursToComplete: task.hoursToComplete,
//         requirements: {
//           create: task.requirements.map((requirement: string) => ({
//             requirement,
//           })),
//         },
//         evaluationCriteria: {
//           create: task.evaluationCriteria.map((criteria: string) => ({
//             criteria,
//           })),
//         },
//       },
//       include: {
//         requirements: true,
//         evaluationCriteria: true,
//       },
//     })
//     return savedTask;
//   } catch (error) {
//     console.error("Error saving machine task:", error);
//     throw new Error("Failed to save machine task.");
//   }
// }
