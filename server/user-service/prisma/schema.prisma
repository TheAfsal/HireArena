generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CompanyRole {
  OWNER
  HR
  MANAGER
  INTERVIEWER
  EMPLOYEE
}

model JobSeeker {
  id        String    @id @default(uuid())
  fullName  String
  email     String    @unique
  password  String
  phone     String?
  dob       DateTime?
  gender    String?
  image     String?
  status    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  serSubscriptions UserSubscription[] 
}

model Company {
  id            String   @id @default(uuid())
  companyName   String   @unique
  website       String?
  location      String?
  employeeCount String?
  industry      String?
  foundingDay   String?
  foundingMonth String?
  foundingYear  String?
  aboutCompany  String?
  jobCategories String[]
  logo          String?
  status        String
  reject_reason String?
  Youtube       String?
  LinkedIn      String?
  Facebook      String?
  Twitter       String?
  Instagram     String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees   CompanyEmployeeRole[]
  invitations Invitation[]
}

model Employee {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  companyAssociations CompanyEmployeeRole[]
}

model CompanyEmployeeRole {
  id        String      @id @default(uuid())
  userId    String      @unique
  companyId String
  role      CompanyRole
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  employee Employee @relation(fields: [userId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
}

model Invitation {
  id        String      @id @default(uuid())
  email     String      @unique
  companyId String
  role      CompanyRole
  token     String      @unique
  message   String
  expiredAt DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

model UserSubscription {
  id            String   @id @default(uuid())
  userId        String
  planId        String
  features      Json
  startDate     DateTime @default(now())
  expiryDate    DateTime
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  transactionId String?

  @@index([userId])
  jobSeeker     JobSeeker @relation(fields: [userId], references: [id])
}

model Transaction {
  id             String   @id @default(uuid())
  userId         String
  amount         Float
  status         String // "pending", "completed", "failed"
  paymentMethod  String // "credit_card", "paypal", "stripe"
  paymentId      String?   
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}
