generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyRole {
  OWNER
  HR
  MANAGER
  INTERVIEWER
  EMPLOYEE
}

model JobSeeker {
  id        String    @id @default(uuid())
  fullName  String
  email     String    @unique
  password  String
  phone     String?
  dob       DateTime?
  gender    String?
  image     String?
  status    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  subscription Subscription?
}

enum SubscriptionPlan {
  BASIC
  PRO
  ENTERPRISE
}

model Subscription {
  id                   String   @id @default(uuid())
  jobSeekerId          String   @unique  // Linked to JobSeeker
  stripeCustomerId     String   // Stripe Customer ID
  stripeSubscriptionId String?  // Active Subscription ID (if any)
  plan                 SubscriptionPlan  // BASIC, PRO, ENTERPRISE
  status               String   @default("ACTIVE") 
  expiresAt            DateTime? // Subscription Expiry Date
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  jobSeeker            JobSeeker @relation(fields: [jobSeekerId], references: [id])
}


model Company {
  id            String   @id @default(uuid())
  companyName   String   @unique
  website       String?
  location      String?
  employeeCount String?
  industry      String?
  foundingDay   String?
  foundingMonth String?
  foundingYear  String?
  aboutCompany  String?
  jobCategories String[]
  logo          String?
  Youtube       String?
  LinkedIn      String?
  Facebook      String?
  Twitter       String?
  Instagram     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees   CompanyEmployeeRole[]
  invitations Invitation[]
}

model Employee {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  companyAssociations CompanyEmployeeRole[]
}

model CompanyEmployeeRole {
  id        String      @id @default(uuid())
  userId    String      @unique
  companyId String
  role      CompanyRole
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  employee Employee @relation(fields: [userId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
}

model Invitation {
  id        String      @id @default(uuid())
  email     String      @unique
  companyId String
  role      CompanyRole
  token     String      @unique
  message   String
  expiredAt DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model JobSeeker {
//   id        String   @id @default(uuid())
//   name      String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   role      String   @default("job-seeker") 
// }

// model Company {
//   id        String   @id @default(uuid())
//   name      String
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   role      String   @default("company") 
// }

// model Admin {
//   id        String   @id @default(uuid())
//   name      String
//   email     String   @unique
//   password  String
//   role      String   @default("admin") 
// }
