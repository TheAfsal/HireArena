datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  REMOTE
  INTERNSHIP
}

enum JobCategories {
  ENGINEERING
  DESIGN
  MARKETING
  HR
  SALES
}

enum Skills {
  JAVASCRIPT
  REACT
  NODEJS
  PYTHON
  JAVA
}

model Job {
  id               String   @id @default(uuid())   
  jobTitle         String  
  salaryMin        Int     
  salaryMax        Int     
  jobDescription   String  
  location         String  
  responsibilities String   
  qualifications   String
  testOptions      Json  
  niceToHave       String? 
  benefits         Json    
  companyId        String  
  createdAt        DateTime @default(now()) 
  updatedAt        DateTime @updatedAt       

  employmentTypes  JobEmploymentType[] 
  categories       JobCategory[]       @relation("JobCategories") 
  requiredSkills   Skill[]             @relation("JobRequiredSkills") 
  applications     JobApplication[] 
}

model JobApplication {
  id            String   @id @default(uuid())  
  jobId         String  
  jobSeekerId   String   
  status        String   @default("PENDING") // Status (APPLIED, INTERVIEW, HIRED, REJECTED)
  resumeUrl     String?  
  appliedAt     DateTime @default(now())

  job           Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobEmploymentType {
  id    String         @id @default(uuid())
  jobId String
  type  EmploymentType
  job   Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobCategoryRelation {
  id       String        @id @default(uuid())
  jobId    String
  category JobCategories
}

model JobSkillRelation {
  id    String @id @default(uuid())
  jobId String
  skill Skills
}

// Skills Section

model CategoryType {
  id            String        @id @default(uuid())
  name          String
  description   String
  status        Boolean
  jobCategories JobCategory[] // A category type can have multiple job categories
}

model JobCategory {
  id             String       @id @default(uuid())
  name           String       
  description    String       
  status         Boolean      
  categoryTypeId String       
  categoryType   CategoryType @relation(fields: [categoryTypeId], references: [id])

  jobs            Job[]        @relation("JobCategories") // Many-to-many relation with Job
  skills          Skill[]      // One-to-many relation with Skill
}

model Skill {
  id              String        @id @default(uuid())    // Unique identifier for the skill
  name            String        // Name of the skill (e.g., "JavaScript", "SQL")
  status          Boolean       // Whether the skill is active or not
  jobCategoryId   String        // Foreign key reference to the JobCategory model
  jobCategory     JobCategory   @relation(fields: [jobCategoryId], references: [id])  // Relation to JobCategory
  createdAt       DateTime      @default(now())         // Created timestamp
  modifiedAt      DateTime      @updatedAt              // Last modified timestamp

  jobs            Job[]          @relation("JobRequiredSkills") // Many-to-many relation with Job
}


